<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $salt
 * @property string $password_strategy
 * @property integer $requires_new_password
 * @property string $email
 * @property integer $login_attempts
 * @property integer $login_time
 * @property string $login_ip
 * @property string $validation_key
 * @property integer $create_id
 * @property integer $create_time
 * @property integer $update_id
 * @property integer $update_time
 *
 * @property Medias[] $mediases
 * @property Medias[] $mediases1
 * @property Menus[] $menuses
 * @property Menus[] $menuses1
 * @property MenusTranslate[] $menusTranslates
 * @property MenusTranslate[] $menusTranslates1
 * @property Posts[] $posts
 * @property Posts[] $posts1
 * @property PostsTranslate[] $postsTranslates
 * @property PostsTranslate[] $postsTranslates1
 */
abstract class BaseUser extends GxActiveRecord {

	
	public function behaviors()
	{
		Yii::import('common.extensions.behaviors.password.*');
		return array(
				// Password behavior strategy
				"APasswordBehavior" => array(
						"class" => "APasswordBehavior",
						"defaultStrategyName" => "bcrypt",
						"strategies" => array(
								"bcrypt" => array(
										"class" => "ABcryptPasswordStrategy",
										"workFactor" => 14,
										"minLength" => 8
								),
								"legacy" => array(
										"class" => "ALegacyMd5PasswordStrategy",
										'minLength' => 8
								)
						),
				)
		);
	}
	
	/**
	 * Generates a new validation key (additional security for cookie)
	 */
	public function regenerateValidationKey()
	{
		$this->saveAttributes(array(
				'validation_key' => md5(mt_rand() . mt_rand() . mt_rand()),
		));
	}
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('requires_new_password, login_attempts, login_time, create_id, create_time, update_id, update_time', 'numerical', 'integerOnly'=>true),
			array('username', 'length', 'max'=>45),
			array('password, salt, email, validation_key', 'length', 'max'=>255),
			array('password_strategy', 'length', 'max'=>50),
			array('login_ip', 'length', 'max'=>32),
			array('username, password, salt, password_strategy, requires_new_password, email, login_attempts, login_time, login_ip, validation_key, create_id, create_time, update_id, update_time', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, username, password, salt, password_strategy, requires_new_password, email, login_attempts, login_time, login_ip, validation_key, create_id, create_time, update_id, update_time', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'mediases' => array(self::HAS_MANY, 'Medias', 'created_by'),
			'mediases1' => array(self::HAS_MANY, 'Medias', 'updatted_by'),
			'menuses' => array(self::HAS_MANY, 'Menus', 'created_by'),
			'menuses1' => array(self::HAS_MANY, 'Menus', 'updated_by'),
			'menusTranslates' => array(self::HAS_MANY, 'MenusTranslate', 'created_by'),
			'menusTranslates1' => array(self::HAS_MANY, 'MenusTranslate', 'updated_by'),
			'posts' => array(self::HAS_MANY, 'Posts', 'created_by'),
			'posts1' => array(self::HAS_MANY, 'Posts', 'updated_by'),
			'postsTranslates' => array(self::HAS_MANY, 'PostsTranslate', 'updated_by'),
			'postsTranslates1' => array(self::HAS_MANY, 'PostsTranslate', 'created_by'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'username' => Yii::t('app', 'Username'),
			'password' => Yii::t('app', 'Password'),
			'salt' => Yii::t('app', 'Salt'),
			'password_strategy' => Yii::t('app', 'Password Strategy'),
			'requires_new_password' => Yii::t('app', 'Requires New Password'),
			'email' => Yii::t('app', 'Email'),
			'login_attempts' => Yii::t('app', 'Login Attempts'),
			'login_time' => Yii::t('app', 'Login Time'),
			'login_ip' => Yii::t('app', 'Login Ip'),
			'validation_key' => Yii::t('app', 'Validation Key'),
			'create_id' => Yii::t('app', 'Create'),
			'create_time' => Yii::t('app', 'Create Time'),
			'update_id' => Yii::t('app', 'Update'),
			'update_time' => Yii::t('app', 'Update Time'),
			'mediases' => null,
			'mediases1' => null,
			'menuses' => null,
			'menuses1' => null,
			'menusTranslates' => null,
			'menusTranslates1' => null,
			'posts' => null,
			'posts1' => null,
			'postsTranslates' => null,
			'postsTranslates1' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('salt', $this->salt, true);
		$criteria->compare('password_strategy', $this->password_strategy, true);
		$criteria->compare('requires_new_password', $this->requires_new_password);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('login_attempts', $this->login_attempts);
		$criteria->compare('login_time', $this->login_time);
		$criteria->compare('login_ip', $this->login_ip, true);
		$criteria->compare('validation_key', $this->validation_key, true);
		$criteria->compare('create_id', $this->create_id);
		$criteria->compare('create_time', $this->create_time);
		$criteria->compare('update_id', $this->update_id);
		$criteria->compare('update_time', $this->update_time);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	public function beforeSave()
	{
		if(parent::beforeSave())
		{
			if($this->isNewRecord)
			{
				$this->salt=$this->generateSalt();
				$this->password = $this->hashPassword($this->password,$this->salt);
			}
	
			return true;
		}
		return false;
	}
	
	/**
	 * Checks if the given password is correct.
	 * @param string the password to be validated
	 * @return boolean whether the password is valid
	 */
	public function validatePassword($password)
	{
		return $this->hashPassword($password,$this->salt)===$this->password;
	}
	
	/**
	 * Generates the password hash.
	 * @param string password
	 * @param string salt
	 * @return string hash
	 */
	public function hashPassword($password,$salt)
	{
		return md5($salt.$password);
	}
	
	/**
	 * Generates a salt that can be used to generate a password hash.
	 * @return string the salt
	 */
	protected function generateSalt()
	{
		return uniqid('',true);
	}
}