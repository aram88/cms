<?php

/**
 * This is the model base class for the table "menus".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Menus".
 *
 * Columns in table "menus" available as properties of the model,
 * followed by relations of table "menus" available as properties of the model.
 *
 * @property integer $id
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $sub_show
 * @property string $img
 * @property integer $visible
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $position
 * @property integer $menu_id
 * @property integer $location
 * @property integer $main_show
 * @property integer $status
 *
 * @property Menus $menu
 * @property Menus[] $menuses
 * @property User $createdBy
 * @property User $updatedBy
 * @property MenusTranslate[] $menusTranslates
 * @property Posts[] $posts
 */
Yii::import('common.models._base.MainModel');
abstract class BaseMenus extends MainModel {
	
	private  $_LOCATIONS = array('Վերև','Ներքև','Ձախ','Աջ');
	public $image;
	public $imageExt;
	public $cropID;
	public $corpX;
	public $cropY;
	public $cropW;
	public $cropH;
	

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'menus';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Menus|Menuses', $n);
	}

	public static function representingColumn() {
		return 'img';
	}

	public function rules() {
		return array(
			array('created_by, updated_by, sub_show, visible, created_at, updated_at, position, menu_id, location, main_show, status', 'numerical', 'integerOnly'=>true),
			array('img', 'safe'),
			array('created_by, updated_by, sub_show, img, visible, created_at, updated_at, position, menu_id, location, main_show, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, created_by, updated_by, sub_show, img, visible, created_at, updated_at, position, menu_id, location, main_show, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'menu' => array(self::BELONGS_TO, 'Menus', 'menu_id'),
			'menuses' => array(self::HAS_MANY, 'Menus', 'menu_id'),
			'createdBy' => array(self::BELONGS_TO, 'User', 'created_by'),
			'updatedBy' => array(self::BELONGS_TO, 'User', 'updated_by'),
			'menusTranslates' => array(self::HAS_MANY, 'MenusTranslate', 'menu_id'),
			'posts' => array(self::HAS_MANY, 'Posts', 'menu_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('labels', 'ID'),
			'created_by' => null,
			'updated_by' => null,
			'sub_show' => Yii::t('labels', 'Sub Show'),
			'img' => Yii::t('labels', 'Img'),
			'visible' => Yii::t('labels', 'Visible'),
			'created_at' => Yii::t('labels', 'Created At'),
			'updated_at' => Yii::t('labels', 'Updated At'),
			'position' => Yii::t('labels', 'Position'),
			'menu_id' => null,
			'location' => Yii::t('labels', 'Location'),
			'main_show' => Yii::t('labels', 'Main Show'),
			'status' => Yii::t('labels', 'Status'),
			'menu' => null,
			'menuses' => null,
			'createdBy' => null,
			'updatedBy' => null,
			'menusTranslates' => null,
			'posts' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('created_by', $this->created_by);
		$criteria->compare('updated_by', $this->updated_by);
		$criteria->compare('sub_show', $this->sub_show);
		$criteria->compare('img', $this->img, true);
		$criteria->compare('visible', $this->visible);
		$criteria->compare('created_at', $this->created_at);
		$criteria->compare('updated_at', $this->updated_at);
		$criteria->compare('position', $this->position);
		$criteria->compare('menu_id', $this->menu_id);
		$criteria->compare('location', $this->location);
		$criteria->compare('main_show', $this->main_show);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	public function getLocations(){
		return $this->_LOCATIONS;
	}
}